0.9.4
=====
Se crea y activa el evento TCibGruposFacturables.OnLogInfo.
Se cambia el nombre de CPRegistros a CibRegistros.
Se cambia el nombre de CPTramas por CibTramas.
Se mueve el procesamiento del evento OnDetenConteo a la unidad CPGrupFacturables.
Se mueve la propiedad TCibFacCabina.Grupo al ancestro TCibGFac.

0.9.3
=====
Se cambia de nombre a TCPTipGrupoFactur por TCibTipGFact.
Se quita el formulario de administración de Tarifas de cabina como objeto estático, y se 
crea de forma dinámica, asociado a un objeto TCibGFacCabinas.
Se modifica al formulario FormAdminCAbinas, para poder ser incluida en CibGFacCabinas, sin
generar referencia circular.
Se quita el formulario de administración de Cabina como objeto estático, y se 
crea de forma dinámica, asociado a un objeto TCibGFacCabinas.
Se mueven los ítems del menu para mostrar la ventana de administración de cabinas y la 
ventana de administración de tarifas, del menú ">Sistema" al menú ">Cabinas", y se 
incluyen también estas opciones en el menú contextual. Además se configura para que estas
opciones reconozcan el objeto seleccionado y no apunten a un objeto estático, como antes.
Se mueve la administración de las ventanas de mensajes de red de las cabinas a la clase
TCibGFacCabinas.
El cambio de la administración de objetos Grupos de facturables, genera aún, errores en 
la liberación de memoria.


0.9.2
=====
Se cambia de nombre a TCibGFacturable por TCibGFac.
Se cambia de nombre a TCibFacturable por TCibFac.
Se cambia de nombre a TObjGrafCabina por TogCabina.
Se cambia de nombre a TCPGruposFacturables por TCibGruposFacturables
Se mueven nuevas unidades a la carpeta \Comunes\Cabinas\ completando la clasificación
iniciada en la versión anterior.
Se crea el objeto gráfico TogGCabinas, para representar a los grupos de cabinas, y se 
implementa su visualización en la pantalla.
Se crea el menú Popup para los grupos de cabinas.
El cambio de la administración de objetos Grupos de facturables, genera aún, errores en 
la liberación de memoria.

0.9.1
=====
Se cambian de nombre a varias unidades para que dejen de usar el prefijio de tipos "TCP",
que puede confundirse con el protocolo TCP. Ahora se usará "TCib" y "Cib" como prefijos.
Se completa la funcionalidad del los objetos TCibFacNiloM de generar su información de 
propiedades y estados.
Se crea el evento TCibGFacturable.OnCambiaPropied.
Se clasifican los archivos de la carpeta \Comunes, creando dos carpetas nuevas: 
\Comunes\Cabinas\ y \Comunes\NiloM\
El cambio de la administración de objetos Grupos de facturables, genera errores en la 
liberación de memoria.

0.9
===
Se corrige el refresco de la ventana de administración de cabinas.
Se incluye el objeto TGrupoTarAlquiler como parte de TCPGrupoCabinas, para 
encapsular mejor a TCPGrupoCabinas y permitir manejar tarifas distintas por
grupo de cabinas.
los grupos de facturables.
Se cambia la librería COnfigFrame por la nueva librería MiConfig, para 
facilitar la serialización del singleton TCPGruposFacturables.
Se crea la unidad CPGrupFacturables y se crea el objeto TCPGruposFacturables, 
para contener y administrar a todos los grupos facturables.
Se habilita el uso del objeto Config.grupos, como contenedor principal de la
aplicación y se crea una copia en frameVisCPlex.
Se elimina la propiedad Nombre de la clase TCabConexion.
Se mueven los eventos OnCambiaEstado, OnCambiaPropied, y la propiedad "Nombre" de TCPCabina 
a la clase base facturable.
Se mueven las propiedades X e Y de TCPCabina a la clase base facturable.
Se crean las propiedades TCPGruposFacturables.ModoCopia  TCPGrupoFacturable.ModoCopia

0.8
===
Se cambia el formato del archivo de estado.
Se amplía la clase TCPFacturable, con métodos virtuales.
Se elimina la propiedad TNiloConexion.Nombre.
Se cambia el nombre de la unidad CPBoletas a CPFacturables y se crea la clase genérica 
TCPFacturable_list.
Se crea el tipo TCPTipGrupoFactur.
Se crea el concepto de "Grupo de facturables" o "Grupo facturable".
Se crea la clase TCPGrupoFacturable, para poder definir a las clases que son Grupos 
facturables.
Se actualizan las clases TCPGrupoCabinas y TCPNiloM para que deriven de la clase 
TCPGrupoFacturable y se adaptan los lazos de exploración para que trabajen con ítems de tipo 
TCPFacturable.
Se cambia el nombre de CadenaEstado a CadenaEstadoAplic y pasa a incluir el estado de los 
diversos grupos facturables.

0.7
===
Se crea el formulario FormBusProductos.
Se crea el formulario FormIngVentas.
Se mejora el mecanismo de ingreso de ventas, corrigiendo varias rutinas.
Se corrige un error de la unidad Utilgrilla, sobre la activación del menú PopUpCells.
Se crea la clase TUtilGrillaFil en la unidad Utilgrilla, para manejar atributos de filas.
Se reordena el código de CPCabinaBase y se corrigen algunos errores en los comentarios.
Se crean las unidades CPNiloM y CPNiloMBase, para implementar la conexión serial al NILO-m.
Se crea el formulario FormNiloMTerminal.
Se crea el formulario FormNiloTarifario para cargar las tarifas de llamadas y se migra gran 
parte del código de VB del NILOTER-m.
Se crea la unidad CPPreproc, para alojar a las rutinas de preprocesamiento de texto para los
archivos de tarifas y rutas. 

SERVER
Se cambia el nombre de la unidad  CdrVentas a RegistrosVentas.
Se crea la clase TCPCellValues para la creación de reportes.
Se mejora el reporte agrupado por categorías y se crea el reporte agrupado por subcategorías.
Se implementan las acciones sobre los ítems de las boletas y se reordena el código relacionado.


0.6
===
11-Jun-2016
Se elimina el evento TCPGrupoCabinas.OnCambiaEstado, porque se encontró que se podría generar
muy frcuentemente y por lo tanto, pierde utilidad.
Se mueve el parte del código de TfrmPrincipal.FormDestroy (liberación de eventos) al destructor 
de TCPGrupoCabinas.
Se modifican las rutinas GetEstadoCabinas y SetEstadoCabinas de TCPCabina, para incluir la 
propiedad HoraPC. Esto hace incompatible el archivo de estado con las versiones anteriores.
 
Se modifican las rutinas GetCadPropied y SetCadPropied de TCPCabina, para incluir la 
propiedad NombrePC. Se mantiene la compatibilidad del archivo INI.
Se agrega la propiedad PantBloq a TCPCabina.
Se crea la clase TCPDecodCadEstado en CPGrupoCabinas, para que funcione como decodificador
de las cadenas de estado de TCPgrupoCabinas.
se elimina el método LinEst_EsCab(), porque ya no es encesario.
Se actualizan los métodos: TfraVisCPlex.ActualizarEstado() y TCPGrupoCabinas.SetEstadoCabinas()
para que trabajen con el objeto TCPDecodCadEstado y soporten el estado con ítems de boleta.
Se activa la opción de enviar la cadena de estado recortada, para cabinas en estado NORMAL.
Se quita la dependencia de la unidad CPREgistros a la unidad CPGRupoCabinas.

SERVER
Se implementa la opción de mostrar múltiples ventanas del explorador de archivos.
Se trabaja sobre el formulario Explorador de Archivos, mejorando su implementación.
Se activa la opción de mostrar el explorador con Doble-Click.
Se cambia de nombre a las rutinas manejadoras de eventos de GrupoCabinas
Se cambia el modo de activación de las cabinas, siguiendo en nuevo esquema de usar tramas para 
todos los comandos de control de cabinas.
Se crea el evento TCPCabina.OnDetenConteo() y se eliminan los métodos ComPonerManten(), 
ComSacarManten() y ComDesactivar() de TCPGrupoCabinas.
Se corrige un error en TCPCabina.Faltante(), y así se soluciona.
Se corrigió un error en TCPCabina.VerCorteAutomatico, que hacía que la cabina se corte antes 
de tiempo.
Se cambia el nombre a TCPCabina.Transc por TCPCabina.TranscSeg.
Se cambia el nombre de la clase TBoleta a TogBoleta en la unidad ObjGraficos. Además se 
modifica la clase para usar a un objeto TCPBoleta, como contenedor de propiedades.
Se crea el evento TCPGrupoCabinas.OnDetenConteo y se usa para actualizar el registro y la 
boleta.
Se activa el manejo de información de boleta como parte de la cadena de estado.
Se crean los eventos: OnLogInfo y OnGrabBoleta, tanto en TCPGrupoCabinas como en TCPCabina,
y se usan para registar los mensajes.
Se habilita la geenración de información de las boletas en los registros.
Se habilita la grabación de las boletas de las cabinas.
Se crea una undiad con funciones para la lectura de los registros en el formato del 
NILOTER-m.
Se implementa la ventana de Reportes de Ingreso, con un solo reporte de registros.

VISOR
Se incluye el formulario Explorador de Archivos, para funcionar en el Visor.
Se cambia de nombre a fraVisCPlex1 por VisorCabinas.
Se deja de usar la rutina especial que se tenía para actualizar el estado de las cabinas
y se pasa a usar TfraVisCPlex.ActualizarEstado().
Se configura para que se actualicen los objetos al iniciar el aplicativo.
  if MsgYesNo('Grabar Boleta de: ' + ogCab.nombre + '?')<>1 then exit;

0.5
===
Se crea un tipo para definir a los tipos de comandos de las tramas, en lugar de usar 
constantes.
Se cambia todo el código de los proyectos, para que se adapten al nuevo tipo de datos.
Se crean métodos nuevos en TCPTrama, para mostrar el nombre del tipo de comando, como cadena 
y como hexadecimal, aprovechando las facilidades por tener el tipo de comando como enumerado.
Se crean dos nuevos comandos, para solicitar y devolver el archivo INI, principal.
Se cambia el nombre de TGrupoCabinas a TCPGrupoCabinas.
Se cambia el nombre del tipo lista TCPCabinas a TCPCabina_list

SERVER
Se trabaja en elformulario explorador de archivos.
Se crea un formulario para mostrar los mensajes de Red.
Se incluye la opción de mostrar múltiples formularios de mensajes de Red, con los mensajes 
correspondientes a cada cabina.
Se crea el evento TCPCabina.OnRegMensaje, para recibir los mensajes de conexion.
Se crea el evento TCPgrupoCabinas.OnRegMensaje.
Se implementa el envío de captura de la pantalla local.
Se cambia de nombre a fraVisCPlex1 por VisorCabinas.
Se cambia de nombre a GrupCabinas por GrupoCabinas.
Se cambia de nombre a TOgCabinaList.
Se agegan los campos HoraPC y NombrePC a la clase TCPCabina.

VISOR
Se crea el evento OnRegMensaje() en TCabServidor y el código asociado para su implementación.
Se mejora la ventana de registro de mensajes y se mejoran los mensajes para poder depurar mejor 
la comunicación.
Se agregó rutinas de verificación, para esperar a que se cierre el hilo de conexión, antes de 
cerrar el programa y evitar goteras de memoria.

0.4
===
Se habilita la propiedad "TCPTrama.Encab" para manejar el encabezado como texto y se elimina
el método TCPTrama.LeeEncabezado

VISOR
Se eliminan las propiedades TCabServidor.sEncRpta y TCabServidor.sDatRpta y se pasa a usar un 
objeto de tipo TPilaCom, para alamcenar los comandos.
Se elimina una versión de EnviaResp(), y se renombra a PonerComando().
Se cambia el nombre de "proceso" por "ServCab" en TForm1.
Se cambia el nombre de la unidad "uCPlex_ConexClte" por CPServidorCab.
Se elimina la bandera Form1.HayCom y se pasa a usar la propiedad HayComando de al pila de 
comandos.
Se agregan los parámetros X e Y a TCabServidor.PonerComando() 
Se incluye el formulario de fijar tiempo, como parte del proyecto, para que se cargue 
automáticamente.

0.3
===
Se cambia de nombre al objeto TCPTrama por TCPProcTrama, para hacer su nombre más consistente
con su función.
Se convierte el objeto TCPProcTrama a una clase, para poder manejar constructor y destructor.
Se convierte el registro TEncab, en clase y se renombra a TCPTrama.
Se elimina el campo TCPProcTrama.traTmp. porque no se le encontró uso.
Se incluye el campo "traDat", en TCPTRama, ya que el objetivo es que guarde toda la trama.
Se eliminan todas las referencias a "traDat", porque ya no son necesarias.
Se crea el objeto TPilaCom en CPTramas, como una pila de comandos.

SERVER

VISOR
Se reemplazan en TCabServidor las rutinas de reconstrucción de tramas por un objeto 
TCPProcTrama.
Se corrige la rutina TCabServidor.Destroy, para que llame al destructor heredado y así evitar 
una gotera de memoria.

0.2
===
SERVER
Se crea el campo TCabConexion.MsjsRed, para guardar los últimos mensajes de Red recibidos.
Se crea el campo TSocketCabina.trama, para permitir procesar las tramas a TSocketCabina.
Se crea el evento TSocketCabina.OnTramaLista, para indciar cuando terminó de recibir una trama.
Se crean los eventos TCabConexion.OnRegMensaje y TCabConexion.OnTramaLista.
Se crea el evento TCPCabina.OnTramaLista.
Se crea el evento TGrupoCabinas.OnTramaLista.
Se habilita el procesamiento de mensajes recibidos de las cabinas cliente. Por ahora solo se 
habilitó la respuesta al comando C_SOL_T_PCS.
VISOR
Se activa la decodificación del comando C_SOL_T_PCS. Para que se refresquen las cabinas.